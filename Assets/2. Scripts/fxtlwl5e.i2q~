using System;
using System.Diagnostics;
using System.Threading.Tasks;
using TMPro;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using UnityEngine;
using UnityEngine.UI;

public class CodeCrackController : MonoBehaviour
{
    [SerializeField] private TextMeshProUGUI _timer;
    [SerializeField] private TextMeshProUGUI _codeToCrack;
    [SerializeField] private TextMeshProUGUI _currentCodeTry;
    [SerializeField] private Button _startCrackingCode;
    [SerializeField] private Button _startCrackingCodeWithJob;
    [SerializeField] private Button _startCrackingCodeWithTask;
    [SerializeField] private Button _clear;
    private bool _isCodeCracked = false;
    [SerializeField] private long _code = 9999888;
    [SerializeField] private TextMeshProUGUI _correctCodeResult;
    private Stopwatch stopwatch = new Stopwatch(); // Used to measure time

    // Start is called before the first frame update
    void Start()
    {
        _startCrackingCode.onClick.AddListener(OnStartCrackingCode);
        _startCrackingCodeWithJob.onClick.AddListener(StartCrackingCodeWithJob);
        _startCrackingCodeWithTask.onClick.AddListener(StartCrackingWithTask);
        _clear.onClick.AddListener(OnClear);
    }

    private void OnClear()
    {
        _correctCodeResult.text = "";
    }



    private void OnStartCrackingCode()
    {
        stopwatch.Reset();
        stopwatch.Start();

        long result = CrackTheCode();

        stopwatch.Stop();

        _correctCodeResult.text = "The correct number is: " + result + "\nTime taken (ms): " + stopwatch.ElapsedMilliseconds;
    }
    private async void StartCrackingWithTask()
    {
        stopwatch.Reset();
        stopwatch.Start();

        long result = await Task.Run(() => CrackTheCode());

        stopwatch.Stop();

        // Update the UI with the result and the time taken in milliseconds
        _correctCodeResult.text = "The correct number is: " + result + "\nTime taken (ms): " + stopwatch.ElapsedMilliseconds;
    }
    private long CrackTheCode()
    {
        long correctNumber = 0;

        for (long i = 0; i <= 9999999; i++)
        {
            _currentCodeTry.text = i.ToString();
            if (i == _code)
            {
                correctNumber = i;
                break;
            }
        }

        return correctNumber;
    }


    // Update is called once per frame
    void Update()
    {
        if (!_isCodeCracked)
            _timer.text = Time.time.ToString();

        if (Input.GetKeyDown(KeyCode.R))
        {
            OnStartCrackingCode();
        }

        if (Input.GetKeyDown(KeyCode.J))
        {
            StartCrackingCodeWithJob();
        }
    }



    private void StartCrackingCodeWithJob()
    {
        stopwatch.Reset(); // Reset the stopwatch
        stopwatch.Start(); // Start measuring time

        NativeArray<long> results = new NativeArray<long>(1, Allocator.TempJob);

        // Create and schedule the job
        var job = new CrackCodeJob
        {
            codeToCrack = _code,
            results = results
        };

        JobHandle jobHandle = job.Schedule();

        // Ensure the job is completed before continuing
        jobHandle.Complete();

        long correctNumber = results[0];

        // Dispose of the NativeArray
        results.Dispose();

        stopwatch.Stop(); // Stop measuring time

        // Update the UI with the result and the time taken in milliseconds
        _correctCodeResult.text = "The correct number is: " + correctNumber + "\nTime taken (ms): " + stopwatch.ElapsedMilliseconds;
    }

    [BurstCompile]
    struct CrackCodeJob : IJob
    {
        public long codeToCrack;
        public NativeArray<long> results;

        public void Execute()
        {
            for (long i = 0; i <= long.MaxValue; i++)
            {
                if (i == codeToCrack)
                {
                    results[0] = i;
                    return;
                }
            }

            results[0] = -1; // Indicates failure to find the code
        }
    }

}
